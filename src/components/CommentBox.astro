---
export interface Props {
  postId: string;
}

const { postId } = Astro.props;
---
<!-- Comment submission form and list -->
<section class="mt-12 rounded-3xl border border-slate-200 bg-white p-8 shadow-sm dark:border-slate-800 dark:bg-slate-900" data-comment-box>
  <h2 class="text-2xl font-semibold text-slate-900 dark:text-slate-100">Share your thoughts</h2>
  <p class="mt-2 text-sm text-slate-600 dark:text-slate-400">
    Join the conversation about this workpiece. Comments are moderated for tone and clarity.
  </p>
  <form id={`comment-form-${postId}`} class="mt-6 flex flex-col gap-4">
    <div>
      <label for={`author-${postId}`} class="block text-xs font-semibold uppercase tracking-widest text-slate-500 dark:text-slate-400">
        Name
      </label>
      <input
        id={`author-${postId}`}
        name="author"
        required
        minlength="2"
        class="mt-2 w-full rounded-xl border border-slate-200 bg-white px-4 py-3 text-sm shadow-sm focus:border-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-200 dark:border-slate-700 dark:bg-slate-950"
      />
    </div>
    <div>
      <label for={`content-${postId}`} class="block text-xs font-semibold uppercase tracking-widest text-slate-500 dark:text-slate-400">
        Comment
      </label>
      <textarea
        id={`content-${postId}`}
        name="content"
        required
        rows={4}
        class="mt-2 w-full rounded-xl border border-slate-200 bg-white px-4 py-3 text-sm shadow-sm focus:border-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-200 dark:border-slate-700 dark:bg-slate-950"
      ></textarea>
    </div>
    <button type="submit" class="inline-flex items-center justify-center rounded-full bg-sky-600 px-6 py-3 text-sm font-semibold text-white transition hover:bg-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-300">
      Post comment
    </button>
    <p id={`comment-status-${postId}`} class="hidden text-sm"></p>
  </form>
  <ul id={`comment-list-${postId}`} class="mt-8 space-y-4" aria-live="polite"></ul>
</section>

<script type="module" is:inline>
  const postId = ${JSON.stringify(postId)};
  const form = document.getElementById(`comment-form-${postId}`);
  const list = document.getElementById(`comment-list-${postId}`);
  const status = document.getElementById(`comment-status-${postId}`);

  const templates = {
    empty: `<li class="text-sm text-slate-500 dark:text-slate-400">Be the first to respond.</li>`
  };

  const renderComments = (comments) => {
    if (!Array.isArray(comments) || comments.length === 0) {
      list.innerHTML = templates.empty;
      return;
    }

    list.innerHTML = comments
      .map((comment) => `
        <li class="rounded-2xl border border-slate-200 bg-slate-50 p-5 text-sm text-slate-700 shadow-sm dark:border-slate-800 dark:bg-slate-950 dark:text-slate-200">
          <div class="flex items-center justify-between">
            <span class="font-semibold text-slate-900 dark:text-slate-100">${comment.author ?? 'Anonymous'}</span>
            <time class="text-xs uppercase tracking-widest text-slate-500 dark:text-slate-400" datetime="${comment.createdAt}">
              ${new Date(comment.createdAt).toLocaleString()}
            </time>
          </div>
          <p class="mt-3 whitespace-pre-wrap leading-relaxed">${comment.content}</p>
        </li>
      `)
      .join('');
  };

  const setStatus = (message, tone = 'info') => {
    if (!status) return;
    status.textContent = message;
    status.classList.remove('hidden', 'text-red-500', 'text-emerald-500', 'text-slate-500');
    const toneClass = tone === 'error' ? 'text-red-500' : tone === 'success' ? 'text-emerald-500' : 'text-slate-500';
    status.classList.add(toneClass);
  };

  const loadComments = async () => {
    try {
      const response = await fetch(`/api/comments?postId=${encodeURIComponent(postId)}`);
      if (!response.ok) {
        throw new Error('Failed to load comments');
      }
      const body = await response.json();
      renderComments(body.comments ?? []);
    } catch (error) {
      console.error(error);
      setStatus('Unable to load comments at the moment. Please try again later.', 'error');
    }
  };

  form?.addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const payload = {
      postId,
      author: formData.get('author'),
      content: formData.get('content')
    };

    try {
      setStatus('Sending your comment...', 'info');
      const response = await fetch('/api/comments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error('Request failed');
      }

      form.reset();
      setStatus('Thanks! Your comment is live.', 'success');
      await loadComments();
    } catch (error) {
      console.error(error);
      setStatus('We could not submit your comment. Please retry.', 'error');
    }
  });

  loadComments();
</script>
