---
export interface Props {
  postId: string;
}

const { postId } = Astro.props;
---
<section class="mt-16 space-y-6" data-comment-box>
  <div class="space-y-3 text-white">
    <h2 class="text-2xl font-semibold">Share your thoughts</h2>
    <p class="text-sm text-slate-300">
      Comments sync with the YouTube conversationsâ€”keep the energy constructive and cinematic.
    </p>
  </div>
  <form id={`comment-form-${postId}`} class="grid gap-4 rounded-3xl border border-white/10 bg-white/5 p-6 backdrop-blur">
    <div>
      <label for={`author-${postId}`} class="block text-xs font-semibold uppercase tracking-[0.3em] text-white/70">
        Name
      </label>
      <input
        id={`author-${postId}`}
        name="author"
        required
        minlength="2"
        class="mt-2 w-full rounded-2xl border border-white/10 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-slate-500 focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-[#ff4c60]/40"
      />
    </div>
    <div>
      <label for={`content-${postId}`} class="block text-xs font-semibold uppercase tracking-[0.3em] text-white/70">
        Comment
      </label>
      <textarea
        id={`content-${postId}`}
        name="content"
        required
        rows={4}
        class="mt-2 w-full rounded-2xl border border-white/10 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-slate-500 focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-[#ff4c60]/40"
      ></textarea>
    </div>
    <button
      type="submit"
      data-gradient-button
      class="bg-gradient-to-r from-[#ff4c60] via-[#ff6f8c] to-[#6a5bff]"
    >
      Post comment
    </button>
    <p id={`comment-status-${postId}`} class="hidden text-sm"></p>
  </form>
  <ul id={`comment-list-${postId}`} class="space-y-4" aria-live="polite"></ul>
</section>

<script type="module" is:inline>
  const postId = ${JSON.stringify(postId)};
  const form = document.getElementById(`comment-form-${postId}`);
  const list = document.getElementById(`comment-list-${postId}`);
  const status = document.getElementById(`comment-status-${postId}`);

  const templates = {
    empty: `<li class="text-sm text-slate-400">Be the first to respond.</li>`
  };

  const escapeHTML = (value) => {
    const stringValue = typeof value === 'string' ? value : String(value ?? '');
    const element = document.createElement('p');
    element.textContent = stringValue;
    return element.innerHTML;
  };

  const renderComments = (comments) => {
    if (!Array.isArray(comments) || comments.length === 0) {
      list.innerHTML = templates.empty;
      return;
    }

    list.innerHTML = comments
      .map((comment) => `
        <li class="rounded-3xl border border-white/10 bg-white/5 p-5 text-sm text-slate-200 backdrop-blur">
          <div class="flex items-center justify-between">
            <span class="font-semibold text-white">${escapeHTML(comment.author ?? 'Anonymous')}</span>
            <time class="text-xs uppercase tracking-[0.3em] text-white/60" datetime="${comment.createdAt}">
              ${new Date(comment.createdAt).toLocaleString()}
            </time>
          </div>
          <p class="mt-3 whitespace-pre-wrap leading-relaxed text-slate-300">${escapeHTML(comment.content)}</p>
        </li>
      `)
      .join('');
  };

  const setStatus = (message, tone = 'info') => {
    if (!status) return;
    status.textContent = message;
    status.classList.remove('hidden', 'text-red-400', 'text-emerald-400', 'text-slate-300');
    const toneClass = tone === 'error' ? 'text-red-400' : tone === 'success' ? 'text-emerald-400' : 'text-slate-300';
    status.classList.add(toneClass);
  };

  const loadComments = async () => {
    try {
      const response = await fetch(`/api/comments?postId=${encodeURIComponent(postId)}`);
      if (!response.ok) {
        throw new Error('Failed to load comments');
      }
      const body = await response.json();
      renderComments(body.comments ?? []);
      if (status) {
        status.textContent = '';
        status.classList.add('hidden');
      }
    } catch (error) {
      console.error(error);
      setStatus('Unable to load comments at the moment. Please try again later.', 'error');
    }
  };

  form?.addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const payload = {
      postId,
      author: formData.get('author'),
      content: formData.get('content')
    };

    try {
      setStatus('Sending your comment...', 'info');
      const response = await fetch('/api/comments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      const body = await response.json().catch(() => ({}));

      if (!response.ok) {
        const message = typeof body.error === 'string' ? body.error : 'Request failed';
        throw new Error(message);
      }

      form.reset();
      setStatus('Thanks! Your comment is live.', 'success');
      await loadComments();
    } catch (error) {
      console.error(error);
      setStatus(error instanceof Error ? error.message : 'We could not submit your comment. Please retry.', 'error');
    }
  });

  loadComments();
</script>
