---
import BaseLayout from '@layouts/BaseLayout.astro';
import CommentBox from '@components/CommentBox.astro';
import { getWorkBySlug } from '@lib/works';

const { slug } = Astro.params;
const work = slug ? getWorkBySlug(slug) : undefined;

if (!work) {
  throw new Error(`Workpiece for slug "${slug}" not found`);
}
---
<BaseLayout title={work.title} description={work.summary} ogImage={work.thumbnail}>
  <article class="mx-auto max-w-5xl px-6 py-16">
    <!-- Project metadata -->
    <header class="space-y-4">
      <p class="text-sm uppercase tracking-[0.3em] text-slate-500 dark:text-slate-400">{new Date(work.publishedAt).toLocaleDateString(undefined, { month: 'long', day: 'numeric', year: 'numeric' })}</p>
      <h1 class="text-4xl font-bold text-slate-900 dark:text-slate-100">{work.title}</h1>
      <div class="flex flex-wrap items-center gap-3 text-sm text-slate-600 dark:text-slate-400">
        <span>Duration: {work.duration}</span>
        {work.client && <span>Client: {work.client}</span>}
      </div>
      <ul class="flex flex-wrap gap-2 text-xs font-semibold uppercase tracking-widest text-slate-500 dark:text-slate-400">
        {work.tags.map((tag) => (
          <li class="rounded-full border border-slate-200 px-3 py-1 dark:border-slate-700" data-tag={tag}>{tag}</li>
        ))}
      </ul>
    </header>

    <!-- Lazy-loaded video player with poster -->
    <div class="mt-10 overflow-hidden rounded-3xl border border-slate-200 bg-slate-950 shadow-lg dark:border-slate-800">
      <video
        class="lazy-video h-full w-full"
        controls
        playsinline
        poster={work.thumbnail}
        preload="none"
        data-src={work.videoUrl}
      >
        <source data-src={work.videoUrl} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    </div>

    <!-- Long-form project description -->
    <div class="prose prose-slate mt-10 max-w-none dark:prose-invert">
      <p>{work.description}</p>
    </div>

    <CommentBox postId={`work-${work.slug}`} />
  </article>
</BaseLayout>

<script type="module" astro:load>
  const lazyVideos = document.querySelectorAll('video.lazy-video');
  const loadVideo = (video) => {
    const source = video.querySelector('source[data-src]');
    if (source && !source.src) {
      source.src = source.dataset.src;
    }
    if (!video.src) {
      video.src = video.dataset.src ?? '';
    }
    video.load();
  };

  const observer = new IntersectionObserver(
    (entries, obs) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const video = entry.target;
          loadVideo(video);
          obs.unobserve(video);
        }
      });
    },
    { rootMargin: '200px' }
  );

  lazyVideos.forEach((video) => observer.observe(video));
</script>
